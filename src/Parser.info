-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Parser.y
-----------------------------------------------------------------------------

state 24 contains 10 shift/reduce conflicts.
state 69 contains 3 shift/reduce conflicts.
state 70 contains 2 shift/reduce conflicts.
state 71 contains 1 shift/reduce conflicts.
state 108 contains 1 shift/reduce conflicts and 39 reduce/reduce conflicts.
state 121 contains 2 shift/reduce conflicts.
state 123 contains 2 shift/reduce conflicts.
state 130 contains 39 reduce/reduce conflicts.
state 136 contains 1 shift/reduce conflicts.
state 139 contains 1 shift/reduce conflicts.
state 154 contains 4 reduce/reduce conflicts.

rule 29 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseMain -> start                          (0)
	start -> start1                                    (1)
	start1 -> decl                                     (2)
	start1 -> decl ';;'                                (3)
	start1 -> start1 ';;' decl                         (4)
	decl -> let bindings                               (5)
	decl -> let rec bindings                           (6)
	bindings -> binding                                (7)
	bindings -> bindings and binding                   (8)
	binding -> pattern '=' expr                        (9)
	binding -> id parameters ':' type '=' expr         (10)
	parameters -> parameter                            (11)
	parameters -> parameters parameter                 (12)
	pattern -> id                                      (13)
	pattern -> '_'                                     (14)
	pattern -> constant                                (15)
	pattern -> pattern '|' pattern                     (16)
	pattern -> pattern as id                           (17)
	pattern -> '(' pattern ')'                         (18)
	pattern -> constr patterns_nosep                   (19)
	pattern -> '(' patterns_comma ')'                  (20)
	pattern -> '[' patterns_semi ']'                   (21)
	pattern -> pattern '::' pattern                    (22)
	patterns_nosep ->                                  (23)
	patterns_nosep -> patterns_nosep pattern           (24)
	patterns_comma ->                                  (25)
	patterns_comma -> patterns_comma ',' pattern       (26)
	patterns_semi ->                                   (27)
	patterns_semi -> patterns_comma ';' pattern        (28)
	expr -> infix_expr ':' type                        (29)
	expr -> infix_expr                                 (30)
	infix_expr -> infix_expr bop expr1                 (31)
	infix_expr -> infix_expr '::' infix_expr           (32)
	infix_expr -> expr1                                (33)
	expr1 -> '-' fexpr                                 (34)
	expr1 -> '!' fexpr                                 (35)
	expr1 -> fexpr                                     (36)
	fexpr -> fexpr aexpr                               (37)
	fexpr -> aexpr                                     (38)
	aexpr -> fun parameters '->' expr                  (39)
	aexpr -> fun parameters ':' type '->' expr         (40)
	aexpr -> let bindings in expr                      (41)
	aexpr -> let rec bindings in expr                  (42)
	aexpr -> if expr then expr else expr               (43)
	aexpr -> match expr with pattern_matching          (44)
	aexpr -> aexpr1                                    (45)
	aexpr1 -> id                                       (46)
	aexpr1 -> constr                                   (47)
	aexpr1 -> constant                                 (48)
	aexpr1 -> '(' expr ')'                             (49)
	aexpr1 -> '(' exprs_comma ')'                      (50)
	aexpr1 -> '[' exprs_semi ']'                       (51)
	exprs_comma ->                                     (52)
	exprs_comma -> exprs_comma ',' expr                (53)
	exprs_semi ->                                      (54)
	exprs_semi -> exprs_comma ';' expr                 (55)
	bop -> '+'                                         (56)
	bop -> '-'                                         (57)
	bop -> '*'                                         (58)
	bop -> '/'                                         (59)
	bop -> '<'                                         (60)
	bop -> '<='                                        (61)
	bop -> '='                                         (62)
	bop -> '<>'                                        (63)
	bop -> '>='                                        (64)
	bop -> '>'                                         (65)
	bop -> '&&'                                        (66)
	bop -> '||'                                        (67)
	bop -> ';'                                         (68)
	pattern_matching -> matches                        (69)
	pattern_matching -> '|' matches                    (70)
	matches -> pattern_match                           (71)
	matches -> matches '|' pattern_match               (72)
	pattern_match -> pattern '->' expr                 (73)
	pattern_match -> pattern when expr '->' expr       (74)
	type -> type '->' type1                            (75)
	type -> type1 id                                   (76)
	type -> type_tuple                                 (77)
	type -> type1                                      (78)
	type_tuple -> type                                 (79)
	type_tuple -> type_tuple '*' type                  (80)
	type1 -> id                                        (81)
	type1 -> apo id                                    (82)
	type1 -> '(' type ')'                              (83)
	parameter -> id                                    (84)
	parameter -> '(' id ':' type ')'                   (85)
	constant -> int                                    (86)
	constant -> float                                  (87)
	constant -> string                                 (88)
	constant -> true                                   (89)
	constant -> false                                  (90)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { Lex.Let }
	in             { Lex.In }
	and            { Lex.LetAnd }
	rec            { Lex.Rec }
	as             { Lex.As }
	if             { Lex.If }
	then           { Lex.Then }
	else           { Lex.Else }
	match          { Lex.Match }
	with           { Lex.With }
	when           { Lex.When }
	fun            { Lex.Fun }
	'('            { Lex.LParen }
	')'            { Lex.RParen }
	'['            { Lex.LBracket }
	']'            { Lex.RBracket }
	'+'            { Lex.Plus }
	'-'            { Lex.Minus }
	'*'            { Lex.Times }
	'/'            { Lex.Divide }
	'<'            { Lex.Lt }
	'<='           { Lex.Le }
	'='            { Lex.Eq }
	'<>'           { Lex.Neq }
	'>='           { Lex.Ge }
	'>'            { Lex.Gt }
	'&&'           { Lex.And }
	'||'           { Lex.Or }
	'!'            { Lex.Not }
	id             { Lex.Identifier _ }
	constr         { Lex.Constructor _ }
	int            { Lex.Integer _ }
	float          { Lex.Float _ }
	string         { Lex.String _ }
	true           { Lex.TTrue }
	false          { Lex.FFalse }
	':'            { Lex.Colon }
	'::'           { Lex.DoubleColon }
	';'            { Lex.Semicolon }
	';;'           { Lex.DoubleSemi }
	','            { Lex.Comma }
	'->'           { Lex.Arrow }
	'_'            { Lex.Underscore }
	apo            { Lex.Apostrophe }
	'|'            { Lex.Pipe }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseMain rule  0
	start           rule  1
	start1          rules 2, 3, 4
	decl            rules 5, 6
	bindings        rules 7, 8
	binding         rules 9, 10
	parameters      rules 11, 12
	pattern         rules 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	patterns_nosep  rules 23, 24
	patterns_comma  rules 25, 26
	patterns_semi   rules 27, 28
	expr            rules 29, 30
	infix_expr      rules 31, 32, 33
	expr1           rules 34, 35, 36
	fexpr           rules 37, 38
	aexpr           rules 39, 40, 41, 42, 43, 44, 45
	aexpr1          rules 46, 47, 48, 49, 50, 51
	exprs_comma     rules 52, 53
	exprs_semi      rules 54, 55
	bop             rules 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68
	pattern_matching rules 69, 70
	matches         rules 71, 72
	pattern_match   rules 73, 74
	type            rules 75, 76, 77, 78
	type_tuple      rules 79, 80
	type1           rules 81, 82, 83
	parameter       rules 84, 85
	constant        rules 86, 87, 88, 89, 90

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseMain -> . start                         (rule 0)

	let            shift, and enter state 4

	start          goto state 5
	start1         goto state 2
	decl           goto state 3

State 1

	start -> . start1                                   (rule 1)

	let            shift, and enter state 4

	start1         goto state 2
	decl           goto state 3

State 2

	start -> start1 .                                   (rule 1)
	start1 -> start1 . ';;' decl                        (rule 4)

	';;'           shift, and enter state 22
	%eof           reduce using rule 1


State 3

	start1 -> decl .                                    (rule 2)
	start1 -> decl . ';;'                               (rule 3)

	';;'           shift, and enter state 21
	%eof           reduce using rule 2


State 4

	decl -> let . bindings                              (rule 5)
	decl -> let . rec bindings                          (rule 6)

	rec            shift, and enter state 10
	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 13
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	bindings       goto state 6
	binding        goto state 7
	pattern        goto state 8
	constant       goto state 9

State 5

	%start_parseMain -> start .                         (rule 0)

	%eof           accept


State 6

	decl -> let bindings .                              (rule 5)
	bindings -> bindings . and binding                  (rule 8)

	and            shift, and enter state 39
	';;'           reduce using rule 5
	%eof           reduce using rule 5


State 7

	bindings -> binding .                               (rule 7)

	in             reduce using rule 7
	and            reduce using rule 7
	';;'           reduce using rule 7
	%eof           reduce using rule 7


State 8

	binding -> pattern . '=' expr                       (rule 9)
	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)

	as             shift, and enter state 35
	'='            shift, and enter state 36
	'::'           shift, and enter state 37
	'|'            shift, and enter state 38


State 9

	pattern -> constant .                               (rule 15)

	as             reduce using rule 15
	when           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	'='            reduce using rule 15
	id             reduce using rule 15
	constr         reduce using rule 15
	int            reduce using rule 15
	float          reduce using rule 15
	string         reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	'::'           reduce using rule 15
	';'            reduce using rule 15
	','            reduce using rule 15
	'->'           reduce using rule 15
	'_'            reduce using rule 15
	'|'            reduce using rule 15


State 10

	decl -> let rec . bindings                          (rule 6)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 13
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	bindings       goto state 34
	binding        goto state 7
	pattern        goto state 8
	constant       goto state 9

State 11

	pattern -> '(' . pattern ')'                        (rule 18)
	pattern -> '(' . patterns_comma ')'                 (rule 20)

	'('            shift, and enter state 11
	')'            reduce using rule 25
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	','            reduce using rule 25
	'_'            shift, and enter state 20

	pattern        goto state 31
	patterns_comma goto state 32
	constant       goto state 9

State 12

	pattern -> '[' . patterns_semi ']'                  (rule 21)

	']'            reduce using rule 27
	';'            reduce using rule 25
	','            reduce using rule 25

	patterns_comma goto state 29
	patterns_semi  goto state 30

State 13

	binding -> id . parameters ':' type '=' expr        (rule 10)
	pattern -> id .                                     (rule 13)

	as             reduce using rule 13
	'('            shift, and enter state 27
	'='            reduce using rule 13
	id             shift, and enter state 28
	'::'           reduce using rule 13
	'|'            reduce using rule 13

	parameters     goto state 25
	parameter      goto state 26

State 14

	pattern -> constr . patterns_nosep                  (rule 19)

	as             reduce using rule 23
	when           reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'['            reduce using rule 23
	']'            reduce using rule 23
	'='            reduce using rule 23
	id             reduce using rule 23
	constr         reduce using rule 23
	int            reduce using rule 23
	float          reduce using rule 23
	string         reduce using rule 23
	true           reduce using rule 23
	false          reduce using rule 23
	'::'           reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	'->'           reduce using rule 23
	'_'            reduce using rule 23
	'|'            reduce using rule 23

	patterns_nosep goto state 24

State 15

	constant -> int .                                   (rule 86)

	let            reduce using rule 86
	in             reduce using rule 86
	and            reduce using rule 86
	as             reduce using rule 86
	if             reduce using rule 86
	then           reduce using rule 86
	else           reduce using rule 86
	match          reduce using rule 86
	with           reduce using rule 86
	when           reduce using rule 86
	fun            reduce using rule 86
	'('            reduce using rule 86
	')'            reduce using rule 86
	'['            reduce using rule 86
	']'            reduce using rule 86
	'+'            reduce using rule 86
	'-'            reduce using rule 86
	'*'            reduce using rule 86
	'/'            reduce using rule 86
	'<'            reduce using rule 86
	'<='           reduce using rule 86
	'='            reduce using rule 86
	'<>'           reduce using rule 86
	'>='           reduce using rule 86
	'>'            reduce using rule 86
	'&&'           reduce using rule 86
	'||'           reduce using rule 86
	id             reduce using rule 86
	constr         reduce using rule 86
	int            reduce using rule 86
	float          reduce using rule 86
	string         reduce using rule 86
	true           reduce using rule 86
	false          reduce using rule 86
	':'            reduce using rule 86
	'::'           reduce using rule 86
	';'            reduce using rule 86
	';;'           reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'_'            reduce using rule 86
	'|'            reduce using rule 86
	%eof           reduce using rule 86


State 16

	constant -> float .                                 (rule 87)

	let            reduce using rule 87
	in             reduce using rule 87
	and            reduce using rule 87
	as             reduce using rule 87
	if             reduce using rule 87
	then           reduce using rule 87
	else           reduce using rule 87
	match          reduce using rule 87
	with           reduce using rule 87
	when           reduce using rule 87
	fun            reduce using rule 87
	'('            reduce using rule 87
	')'            reduce using rule 87
	'['            reduce using rule 87
	']'            reduce using rule 87
	'+'            reduce using rule 87
	'-'            reduce using rule 87
	'*'            reduce using rule 87
	'/'            reduce using rule 87
	'<'            reduce using rule 87
	'<='           reduce using rule 87
	'='            reduce using rule 87
	'<>'           reduce using rule 87
	'>='           reduce using rule 87
	'>'            reduce using rule 87
	'&&'           reduce using rule 87
	'||'           reduce using rule 87
	id             reduce using rule 87
	constr         reduce using rule 87
	int            reduce using rule 87
	float          reduce using rule 87
	string         reduce using rule 87
	true           reduce using rule 87
	false          reduce using rule 87
	':'            reduce using rule 87
	'::'           reduce using rule 87
	';'            reduce using rule 87
	';;'           reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'_'            reduce using rule 87
	'|'            reduce using rule 87
	%eof           reduce using rule 87


State 17

	constant -> string .                                (rule 88)

	let            reduce using rule 88
	in             reduce using rule 88
	and            reduce using rule 88
	as             reduce using rule 88
	if             reduce using rule 88
	then           reduce using rule 88
	else           reduce using rule 88
	match          reduce using rule 88
	with           reduce using rule 88
	when           reduce using rule 88
	fun            reduce using rule 88
	'('            reduce using rule 88
	')'            reduce using rule 88
	'['            reduce using rule 88
	']'            reduce using rule 88
	'+'            reduce using rule 88
	'-'            reduce using rule 88
	'*'            reduce using rule 88
	'/'            reduce using rule 88
	'<'            reduce using rule 88
	'<='           reduce using rule 88
	'='            reduce using rule 88
	'<>'           reduce using rule 88
	'>='           reduce using rule 88
	'>'            reduce using rule 88
	'&&'           reduce using rule 88
	'||'           reduce using rule 88
	id             reduce using rule 88
	constr         reduce using rule 88
	int            reduce using rule 88
	float          reduce using rule 88
	string         reduce using rule 88
	true           reduce using rule 88
	false          reduce using rule 88
	':'            reduce using rule 88
	'::'           reduce using rule 88
	';'            reduce using rule 88
	';;'           reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	'_'            reduce using rule 88
	'|'            reduce using rule 88
	%eof           reduce using rule 88


State 18

	constant -> true .                                  (rule 89)

	let            reduce using rule 89
	in             reduce using rule 89
	and            reduce using rule 89
	as             reduce using rule 89
	if             reduce using rule 89
	then           reduce using rule 89
	else           reduce using rule 89
	match          reduce using rule 89
	with           reduce using rule 89
	when           reduce using rule 89
	fun            reduce using rule 89
	'('            reduce using rule 89
	')'            reduce using rule 89
	'['            reduce using rule 89
	']'            reduce using rule 89
	'+'            reduce using rule 89
	'-'            reduce using rule 89
	'*'            reduce using rule 89
	'/'            reduce using rule 89
	'<'            reduce using rule 89
	'<='           reduce using rule 89
	'='            reduce using rule 89
	'<>'           reduce using rule 89
	'>='           reduce using rule 89
	'>'            reduce using rule 89
	'&&'           reduce using rule 89
	'||'           reduce using rule 89
	id             reduce using rule 89
	constr         reduce using rule 89
	int            reduce using rule 89
	float          reduce using rule 89
	string         reduce using rule 89
	true           reduce using rule 89
	false          reduce using rule 89
	':'            reduce using rule 89
	'::'           reduce using rule 89
	';'            reduce using rule 89
	';;'           reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	'_'            reduce using rule 89
	'|'            reduce using rule 89
	%eof           reduce using rule 89


State 19

	constant -> false .                                 (rule 90)

	let            reduce using rule 90
	in             reduce using rule 90
	and            reduce using rule 90
	as             reduce using rule 90
	if             reduce using rule 90
	then           reduce using rule 90
	else           reduce using rule 90
	match          reduce using rule 90
	with           reduce using rule 90
	when           reduce using rule 90
	fun            reduce using rule 90
	'('            reduce using rule 90
	')'            reduce using rule 90
	'['            reduce using rule 90
	']'            reduce using rule 90
	'+'            reduce using rule 90
	'-'            reduce using rule 90
	'*'            reduce using rule 90
	'/'            reduce using rule 90
	'<'            reduce using rule 90
	'<='           reduce using rule 90
	'='            reduce using rule 90
	'<>'           reduce using rule 90
	'>='           reduce using rule 90
	'>'            reduce using rule 90
	'&&'           reduce using rule 90
	'||'           reduce using rule 90
	id             reduce using rule 90
	constr         reduce using rule 90
	int            reduce using rule 90
	float          reduce using rule 90
	string         reduce using rule 90
	true           reduce using rule 90
	false          reduce using rule 90
	':'            reduce using rule 90
	'::'           reduce using rule 90
	';'            reduce using rule 90
	';;'           reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	'_'            reduce using rule 90
	'|'            reduce using rule 90
	%eof           reduce using rule 90


State 20

	pattern -> '_' .                                    (rule 14)

	as             reduce using rule 14
	when           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'['            reduce using rule 14
	']'            reduce using rule 14
	'='            reduce using rule 14
	id             reduce using rule 14
	constr         reduce using rule 14
	int            reduce using rule 14
	float          reduce using rule 14
	string         reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	'::'           reduce using rule 14
	';'            reduce using rule 14
	','            reduce using rule 14
	'->'           reduce using rule 14
	'_'            reduce using rule 14
	'|'            reduce using rule 14


State 21

	start1 -> decl ';;' .                               (rule 3)

	';;'           reduce using rule 3
	%eof           reduce using rule 3


State 22

	start1 -> start1 ';;' . decl                        (rule 4)

	let            shift, and enter state 4

	decl           goto state 23

State 23

	start1 -> start1 ';;' decl .                        (rule 4)

	';;'           reduce using rule 4
	%eof           reduce using rule 4


State 24

	pattern -> constr patterns_nosep .                  (rule 19)
	patterns_nosep -> patterns_nosep . pattern          (rule 24)

	as             reduce using rule 19
	when           reduce using rule 19
	'('            shift, and enter state 11
			(reduce using rule 19)

	')'            reduce using rule 19
	'['            shift, and enter state 12
			(reduce using rule 19)

	']'            reduce using rule 19
	'='            reduce using rule 19
	id             shift, and enter state 33
			(reduce using rule 19)

	constr         shift, and enter state 14
			(reduce using rule 19)

	int            shift, and enter state 15
			(reduce using rule 19)

	float          shift, and enter state 16
			(reduce using rule 19)

	string         shift, and enter state 17
			(reduce using rule 19)

	true           shift, and enter state 18
			(reduce using rule 19)

	false          shift, and enter state 19
			(reduce using rule 19)

	'::'           reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	'_'            shift, and enter state 20
			(reduce using rule 19)

	'|'            reduce using rule 19

	pattern        goto state 69
	constant       goto state 9

State 25

	binding -> id parameters . ':' type '=' expr        (rule 10)
	parameters -> parameters . parameter                (rule 12)

	'('            shift, and enter state 27
	id             shift, and enter state 28
	':'            shift, and enter state 68

	parameter      goto state 67

State 26

	parameters -> parameter .                           (rule 11)

	'('            reduce using rule 11
	id             reduce using rule 11
	':'            reduce using rule 11
	'->'           reduce using rule 11


State 27

	parameter -> '(' . id ':' type ')'                  (rule 85)

	id             shift, and enter state 66


State 28

	parameter -> id .                                   (rule 84)

	'('            reduce using rule 84
	id             reduce using rule 84
	':'            reduce using rule 84
	'->'           reduce using rule 84


State 29

	patterns_comma -> patterns_comma . ',' pattern      (rule 26)
	patterns_semi -> patterns_comma . ';' pattern       (rule 28)

	';'            shift, and enter state 65
	','            shift, and enter state 62


State 30

	pattern -> '[' patterns_semi . ']'                  (rule 21)

	']'            shift, and enter state 64


State 31

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> '(' pattern . ')'                        (rule 18)
	pattern -> pattern . '::' pattern                   (rule 22)

	as             shift, and enter state 35
	')'            shift, and enter state 63
	'::'           shift, and enter state 37
	'|'            shift, and enter state 38


State 32

	pattern -> '(' patterns_comma . ')'                 (rule 20)
	patterns_comma -> patterns_comma . ',' pattern      (rule 26)

	')'            shift, and enter state 61
	','            shift, and enter state 62


State 33

	pattern -> id .                                     (rule 13)

	as             reduce using rule 13
	when           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'['            reduce using rule 13
	']'            reduce using rule 13
	'='            reduce using rule 13
	id             reduce using rule 13
	constr         reduce using rule 13
	int            reduce using rule 13
	float          reduce using rule 13
	string         reduce using rule 13
	true           reduce using rule 13
	false          reduce using rule 13
	'::'           reduce using rule 13
	';'            reduce using rule 13
	','            reduce using rule 13
	'->'           reduce using rule 13
	'_'            reduce using rule 13
	'|'            reduce using rule 13


State 34

	decl -> let rec bindings .                          (rule 6)
	bindings -> bindings . and binding                  (rule 8)

	and            shift, and enter state 39
	';;'           reduce using rule 6
	%eof           reduce using rule 6


State 35

	pattern -> pattern as . id                          (rule 17)

	id             shift, and enter state 60


State 36

	binding -> pattern '=' . expr                       (rule 9)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 43
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 37

	pattern -> pattern '::' . pattern                   (rule 22)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 42
	constant       goto state 9

State 38

	pattern -> pattern '|' . pattern                    (rule 16)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 41
	constant       goto state 9

State 39

	bindings -> bindings and . binding                  (rule 8)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 13
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	binding        goto state 40
	pattern        goto state 8
	constant       goto state 9

State 40

	bindings -> bindings and binding .                  (rule 8)

	in             reduce using rule 8
	and            reduce using rule 8
	';;'           reduce using rule 8
	%eof           reduce using rule 8


State 41

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern '|' pattern .                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)

	as             reduce using rule 16
	when           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	'='            reduce using rule 16
	id             reduce using rule 16
	constr         reduce using rule 16
	int            reduce using rule 16
	float          reduce using rule 16
	string         reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	'::'           reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	'->'           reduce using rule 16
	'_'            reduce using rule 16
	'|'            reduce using rule 16


State 42

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)
	pattern -> pattern '::' pattern .                   (rule 22)

	as             shift, and enter state 35
	when           reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'['            reduce using rule 22
	']'            reduce using rule 22
	'='            reduce using rule 22
	id             reduce using rule 22
	constr         reduce using rule 22
	int            reduce using rule 22
	float          reduce using rule 22
	string         reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'::'           shift, and enter state 37
	';'            reduce using rule 22
	','            reduce using rule 22
	'->'           reduce using rule 22
	'_'            reduce using rule 22
	'|'            shift, and enter state 38


State 43

	binding -> pattern '=' expr .                       (rule 9)

	in             reduce using rule 9
	and            reduce using rule 9
	';;'           reduce using rule 9
	%eof           reduce using rule 9


State 44

	expr -> infix_expr . ':' type                       (rule 29)
	expr -> infix_expr .                                (rule 30)
	infix_expr -> infix_expr . bop expr1                (rule 31)
	infix_expr -> infix_expr . '::' infix_expr          (rule 32)

	let            reduce using rule 30
	in             reduce using rule 30
	and            reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	match          reduce using rule 30
	with           reduce using rule 30
	fun            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'['            reduce using rule 30
	']'            reduce using rule 30
	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'<'            shift, and enter state 96
	'<='           shift, and enter state 97
	'='            shift, and enter state 98
	'<>'           shift, and enter state 99
	'>='           shift, and enter state 100
	'>'            shift, and enter state 101
	'&&'           shift, and enter state 102
	'||'           shift, and enter state 103
	id             reduce using rule 30
	constr         reduce using rule 30
	int            reduce using rule 30
	float          reduce using rule 30
	string         reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	':'            shift, and enter state 104
	'::'           shift, and enter state 105
	';'            shift, and enter state 106
	';;'           reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	'|'            reduce using rule 30
	%eof           reduce using rule 30

	bop            goto state 91

State 45

	infix_expr -> expr1 .                               (rule 33)

	let            reduce using rule 33
	in             reduce using rule 33
	and            reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	match          reduce using rule 33
	with           reduce using rule 33
	fun            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'>='           reduce using rule 33
	'>'            reduce using rule 33
	'&&'           reduce using rule 33
	'||'           reduce using rule 33
	id             reduce using rule 33
	constr         reduce using rule 33
	int            reduce using rule 33
	float          reduce using rule 33
	string         reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	':'            reduce using rule 33
	'::'           reduce using rule 33
	';'            reduce using rule 33
	';;'           reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	'|'            reduce using rule 33
	%eof           reduce using rule 33


State 46

	expr1 -> fexpr .                                    (rule 36)
	fexpr -> fexpr . aexpr                              (rule 37)

	let            shift, and enter state 50
	in             reduce using rule 36
	and            reduce using rule 36
	if             shift, and enter state 51
	then           reduce using rule 36
	else           reduce using rule 36
	match          shift, and enter state 52
	with           reduce using rule 36
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	')'            reduce using rule 36
	'['            shift, and enter state 55
	']'            reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'>='           reduce using rule 36
	'>'            reduce using rule 36
	'&&'           reduce using rule 36
	'||'           reduce using rule 36
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	':'            reduce using rule 36
	'::'           reduce using rule 36
	';'            reduce using rule 36
	';;'           reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	'|'            reduce using rule 36
	%eof           reduce using rule 36

	aexpr          goto state 90
	aexpr1         goto state 48
	constant       goto state 49

State 47

	fexpr -> aexpr .                                    (rule 38)

	let            reduce using rule 38
	in             reduce using rule 38
	and            reduce using rule 38
	if             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	match          reduce using rule 38
	with           reduce using rule 38
	fun            reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'>='           reduce using rule 38
	'>'            reduce using rule 38
	'&&'           reduce using rule 38
	'||'           reduce using rule 38
	id             reduce using rule 38
	constr         reduce using rule 38
	int            reduce using rule 38
	float          reduce using rule 38
	string         reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	':'            reduce using rule 38
	'::'           reduce using rule 38
	';'            reduce using rule 38
	';;'           reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	'|'            reduce using rule 38
	%eof           reduce using rule 38


State 48

	aexpr -> aexpr1 .                                   (rule 45)

	let            reduce using rule 45
	in             reduce using rule 45
	and            reduce using rule 45
	if             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	match          reduce using rule 45
	with           reduce using rule 45
	fun            reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'['            reduce using rule 45
	']'            reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'='            reduce using rule 45
	'<>'           reduce using rule 45
	'>='           reduce using rule 45
	'>'            reduce using rule 45
	'&&'           reduce using rule 45
	'||'           reduce using rule 45
	id             reduce using rule 45
	constr         reduce using rule 45
	int            reduce using rule 45
	float          reduce using rule 45
	string         reduce using rule 45
	true           reduce using rule 45
	false          reduce using rule 45
	':'            reduce using rule 45
	'::'           reduce using rule 45
	';'            reduce using rule 45
	';;'           reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'|'            reduce using rule 45
	%eof           reduce using rule 45


State 49

	aexpr1 -> constant .                                (rule 48)

	let            reduce using rule 48
	in             reduce using rule 48
	and            reduce using rule 48
	if             reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	match          reduce using rule 48
	with           reduce using rule 48
	fun            reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'['            reduce using rule 48
	']'            reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'='            reduce using rule 48
	'<>'           reduce using rule 48
	'>='           reduce using rule 48
	'>'            reduce using rule 48
	'&&'           reduce using rule 48
	'||'           reduce using rule 48
	id             reduce using rule 48
	constr         reduce using rule 48
	int            reduce using rule 48
	float          reduce using rule 48
	string         reduce using rule 48
	true           reduce using rule 48
	false          reduce using rule 48
	':'            reduce using rule 48
	'::'           reduce using rule 48
	';'            reduce using rule 48
	';;'           reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'|'            reduce using rule 48
	%eof           reduce using rule 48


State 50

	aexpr -> let . bindings in expr                     (rule 41)
	aexpr -> let . rec bindings in expr                 (rule 42)

	rec            shift, and enter state 89
	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 13
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	bindings       goto state 88
	binding        goto state 7
	pattern        goto state 8
	constant       goto state 9

State 51

	aexpr -> if . expr then expr else expr              (rule 43)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 87
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 52

	aexpr -> match . expr with pattern_matching         (rule 44)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 86
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 53

	aexpr -> fun . parameters '->' expr                 (rule 39)
	aexpr -> fun . parameters ':' type '->' expr        (rule 40)

	'('            shift, and enter state 27
	id             shift, and enter state 28

	parameters     goto state 85
	parameter      goto state 26

State 54

	aexpr1 -> '(' . expr ')'                            (rule 49)
	aexpr1 -> '(' . exprs_comma ')'                     (rule 50)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	')'            reduce using rule 52
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	','            reduce using rule 52

	expr           goto state 83
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	exprs_comma    goto state 84
	constant       goto state 49

State 55

	aexpr1 -> '[' . exprs_semi ']'                      (rule 51)

	']'            reduce using rule 54
	';'            reduce using rule 52
	','            reduce using rule 52

	exprs_comma    goto state 81
	exprs_semi     goto state 82

State 56

	expr1 -> '-' . fexpr                                (rule 34)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	fexpr          goto state 80
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 57

	expr1 -> '!' . fexpr                                (rule 35)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	fexpr          goto state 79
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 58

	aexpr1 -> id .                                      (rule 46)

	let            reduce using rule 46
	in             reduce using rule 46
	and            reduce using rule 46
	if             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	match          reduce using rule 46
	with           reduce using rule 46
	fun            reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'['            reduce using rule 46
	']'            reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'='            reduce using rule 46
	'<>'           reduce using rule 46
	'>='           reduce using rule 46
	'>'            reduce using rule 46
	'&&'           reduce using rule 46
	'||'           reduce using rule 46
	id             reduce using rule 46
	constr         reduce using rule 46
	int            reduce using rule 46
	float          reduce using rule 46
	string         reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	':'            reduce using rule 46
	'::'           reduce using rule 46
	';'            reduce using rule 46
	';;'           reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'|'            reduce using rule 46
	%eof           reduce using rule 46


State 59

	aexpr1 -> constr .                                  (rule 47)

	let            reduce using rule 47
	in             reduce using rule 47
	and            reduce using rule 47
	if             reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	match          reduce using rule 47
	with           reduce using rule 47
	fun            reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'['            reduce using rule 47
	']'            reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'='            reduce using rule 47
	'<>'           reduce using rule 47
	'>='           reduce using rule 47
	'>'            reduce using rule 47
	'&&'           reduce using rule 47
	'||'           reduce using rule 47
	id             reduce using rule 47
	constr         reduce using rule 47
	int            reduce using rule 47
	float          reduce using rule 47
	string         reduce using rule 47
	true           reduce using rule 47
	false          reduce using rule 47
	':'            reduce using rule 47
	'::'           reduce using rule 47
	';'            reduce using rule 47
	';;'           reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'|'            reduce using rule 47
	%eof           reduce using rule 47


State 60

	pattern -> pattern as id .                          (rule 17)

	as             reduce using rule 17
	when           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'['            reduce using rule 17
	']'            reduce using rule 17
	'='            reduce using rule 17
	id             reduce using rule 17
	constr         reduce using rule 17
	int            reduce using rule 17
	float          reduce using rule 17
	string         reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	'::'           reduce using rule 17
	';'            reduce using rule 17
	','            reduce using rule 17
	'->'           reduce using rule 17
	'_'            reduce using rule 17
	'|'            reduce using rule 17


State 61

	pattern -> '(' patterns_comma ')' .                 (rule 20)

	as             reduce using rule 20
	when           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	'='            reduce using rule 20
	id             reduce using rule 20
	constr         reduce using rule 20
	int            reduce using rule 20
	float          reduce using rule 20
	string         reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	'::'           reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'_'            reduce using rule 20
	'|'            reduce using rule 20


State 62

	patterns_comma -> patterns_comma ',' . pattern      (rule 26)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 78
	constant       goto state 9

State 63

	pattern -> '(' pattern ')' .                        (rule 18)

	as             reduce using rule 18
	when           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	'='            reduce using rule 18
	id             reduce using rule 18
	constr         reduce using rule 18
	int            reduce using rule 18
	float          reduce using rule 18
	string         reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	'::'           reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	'->'           reduce using rule 18
	'_'            reduce using rule 18
	'|'            reduce using rule 18


State 64

	pattern -> '[' patterns_semi ']' .                  (rule 21)

	as             reduce using rule 21
	when           reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	'='            reduce using rule 21
	id             reduce using rule 21
	constr         reduce using rule 21
	int            reduce using rule 21
	float          reduce using rule 21
	string         reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'::'           reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	'->'           reduce using rule 21
	'_'            reduce using rule 21
	'|'            reduce using rule 21


State 65

	patterns_semi -> patterns_comma ';' . pattern       (rule 28)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 77
	constant       goto state 9

State 66

	parameter -> '(' id . ':' type ')'                  (rule 85)

	':'            shift, and enter state 76


State 67

	parameters -> parameters parameter .                (rule 12)

	'('            reduce using rule 12
	id             reduce using rule 12
	':'            reduce using rule 12
	'->'           reduce using rule 12


State 68

	binding -> id parameters ':' . type '=' expr        (rule 10)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 70
	type_tuple     goto state 71
	type1          goto state 72

State 69

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)
	patterns_nosep -> patterns_nosep pattern .          (rule 24)

	as             shift, and enter state 35
			(reduce using rule 24)

	when           reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'['            reduce using rule 24
	']'            reduce using rule 24
	'='            reduce using rule 24
	id             reduce using rule 24
	constr         reduce using rule 24
	int            reduce using rule 24
	float          reduce using rule 24
	string         reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'::'           shift, and enter state 37
			(reduce using rule 24)

	';'            reduce using rule 24
	','            reduce using rule 24
	'->'           reduce using rule 24
	'_'            reduce using rule 24
	'|'            shift, and enter state 38
			(reduce using rule 24)



State 70

	binding -> id parameters ':' type . '=' expr        (rule 10)
	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)

	'*'            reduce using rule 79
	'='            shift, and enter state 126
			(reduce using rule 79)

	'->'           shift, and enter state 127
			(reduce using rule 79)



State 71

	type -> type_tuple .                                (rule 77)
	type_tuple -> type_tuple . '*' type                 (rule 80)

	let            reduce using rule 77
	in             reduce using rule 77
	and            reduce using rule 77
	if             reduce using rule 77
	then           reduce using rule 77
	else           reduce using rule 77
	match          reduce using rule 77
	with           reduce using rule 77
	fun            reduce using rule 77
	'('            reduce using rule 77
	')'            reduce using rule 77
	'['            reduce using rule 77
	']'            reduce using rule 77
	'+'            reduce using rule 77
	'-'            reduce using rule 77
	'*'            shift, and enter state 125
			(reduce using rule 77)

	'/'            reduce using rule 77
	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'='            reduce using rule 77
	'<>'           reduce using rule 77
	'>='           reduce using rule 77
	'>'            reduce using rule 77
	'&&'           reduce using rule 77
	'||'           reduce using rule 77
	id             reduce using rule 77
	constr         reduce using rule 77
	int            reduce using rule 77
	float          reduce using rule 77
	string         reduce using rule 77
	true           reduce using rule 77
	false          reduce using rule 77
	':'            reduce using rule 77
	'::'           reduce using rule 77
	';'            reduce using rule 77
	';;'           reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	'|'            reduce using rule 77
	%eof           reduce using rule 77


State 72

	type -> type1 . id                                  (rule 76)
	type -> type1 .                                     (rule 78)

	let            reduce using rule 78
	in             reduce using rule 78
	and            reduce using rule 78
	if             reduce using rule 78
	then           reduce using rule 78
	else           reduce using rule 78
	match          reduce using rule 78
	with           reduce using rule 78
	fun            reduce using rule 78
	'('            reduce using rule 78
	')'            reduce using rule 78
	'['            reduce using rule 78
	']'            reduce using rule 78
	'+'            reduce using rule 78
	'-'            reduce using rule 78
	'*'            reduce using rule 78
	'/'            reduce using rule 78
	'<'            reduce using rule 78
	'<='           reduce using rule 78
	'='            reduce using rule 78
	'<>'           reduce using rule 78
	'>='           reduce using rule 78
	'>'            reduce using rule 78
	'&&'           reduce using rule 78
	'||'           reduce using rule 78
	id             shift, and enter state 124
	constr         reduce using rule 78
	int            reduce using rule 78
	float          reduce using rule 78
	string         reduce using rule 78
	true           reduce using rule 78
	false          reduce using rule 78
	':'            reduce using rule 78
	'::'           reduce using rule 78
	';'            reduce using rule 78
	';;'           reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	'|'            reduce using rule 78
	%eof           reduce using rule 78


State 73

	type1 -> '(' . type ')'                             (rule 83)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 123
	type_tuple     goto state 71
	type1          goto state 72

State 74

	type1 -> id .                                       (rule 81)

	let            reduce using rule 81
	in             reduce using rule 81
	and            reduce using rule 81
	if             reduce using rule 81
	then           reduce using rule 81
	else           reduce using rule 81
	match          reduce using rule 81
	with           reduce using rule 81
	fun            reduce using rule 81
	'('            reduce using rule 81
	')'            reduce using rule 81
	'['            reduce using rule 81
	']'            reduce using rule 81
	'+'            reduce using rule 81
	'-'            reduce using rule 81
	'*'            reduce using rule 81
	'/'            reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'='            reduce using rule 81
	'<>'           reduce using rule 81
	'>='           reduce using rule 81
	'>'            reduce using rule 81
	'&&'           reduce using rule 81
	'||'           reduce using rule 81
	id             reduce using rule 81
	constr         reduce using rule 81
	int            reduce using rule 81
	float          reduce using rule 81
	string         reduce using rule 81
	true           reduce using rule 81
	false          reduce using rule 81
	':'            reduce using rule 81
	'::'           reduce using rule 81
	';'            reduce using rule 81
	';;'           reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	'|'            reduce using rule 81
	%eof           reduce using rule 81


State 75

	type1 -> apo . id                                   (rule 82)

	id             shift, and enter state 122


State 76

	parameter -> '(' id ':' . type ')'                  (rule 85)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 121
	type_tuple     goto state 71
	type1          goto state 72

State 77

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)
	patterns_semi -> patterns_comma ';' pattern .       (rule 28)

	as             shift, and enter state 35
	']'            reduce using rule 28
	'::'           shift, and enter state 37
	'|'            shift, and enter state 38


State 78

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)
	patterns_comma -> patterns_comma ',' pattern .      (rule 26)

	as             shift, and enter state 35
	')'            reduce using rule 26
	'::'           shift, and enter state 37
	';'            reduce using rule 26
	','            reduce using rule 26
	'|'            shift, and enter state 38


State 79

	expr1 -> '!' fexpr .                                (rule 35)
	fexpr -> fexpr . aexpr                              (rule 37)

	let            shift, and enter state 50
	in             reduce using rule 35
	and            reduce using rule 35
	if             shift, and enter state 51
	then           reduce using rule 35
	else           reduce using rule 35
	match          shift, and enter state 52
	with           reduce using rule 35
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	')'            reduce using rule 35
	'['            shift, and enter state 55
	']'            reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'>='           reduce using rule 35
	'>'            reduce using rule 35
	'&&'           reduce using rule 35
	'||'           reduce using rule 35
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	':'            reduce using rule 35
	'::'           reduce using rule 35
	';'            reduce using rule 35
	';;'           reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	'|'            reduce using rule 35
	%eof           reduce using rule 35

	aexpr          goto state 90
	aexpr1         goto state 48
	constant       goto state 49

State 80

	expr1 -> '-' fexpr .                                (rule 34)
	fexpr -> fexpr . aexpr                              (rule 37)

	let            shift, and enter state 50
	in             reduce using rule 34
	and            reduce using rule 34
	if             shift, and enter state 51
	then           reduce using rule 34
	else           reduce using rule 34
	match          shift, and enter state 52
	with           reduce using rule 34
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	')'            reduce using rule 34
	'['            shift, and enter state 55
	']'            reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'>='           reduce using rule 34
	'>'            reduce using rule 34
	'&&'           reduce using rule 34
	'||'           reduce using rule 34
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	':'            reduce using rule 34
	'::'           reduce using rule 34
	';'            reduce using rule 34
	';;'           reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	'|'            reduce using rule 34
	%eof           reduce using rule 34

	aexpr          goto state 90
	aexpr1         goto state 48
	constant       goto state 49

State 81

	exprs_comma -> exprs_comma . ',' expr               (rule 53)
	exprs_semi -> exprs_comma . ';' expr                (rule 55)

	';'            shift, and enter state 120
	','            shift, and enter state 117


State 82

	aexpr1 -> '[' exprs_semi . ']'                      (rule 51)

	']'            shift, and enter state 119


State 83

	aexpr1 -> '(' expr . ')'                            (rule 49)

	')'            shift, and enter state 118


State 84

	aexpr1 -> '(' exprs_comma . ')'                     (rule 50)
	exprs_comma -> exprs_comma . ',' expr               (rule 53)

	')'            shift, and enter state 116
	','            shift, and enter state 117


State 85

	parameters -> parameters . parameter                (rule 12)
	aexpr -> fun parameters . '->' expr                 (rule 39)
	aexpr -> fun parameters . ':' type '->' expr        (rule 40)

	'('            shift, and enter state 27
	id             shift, and enter state 28
	':'            shift, and enter state 114
	'->'           shift, and enter state 115

	parameter      goto state 67

State 86

	aexpr -> match expr . with pattern_matching         (rule 44)

	with           shift, and enter state 113


State 87

	aexpr -> if expr . then expr else expr              (rule 43)

	then           shift, and enter state 112


State 88

	bindings -> bindings . and binding                  (rule 8)
	aexpr -> let bindings . in expr                     (rule 41)

	in             shift, and enter state 111
	and            shift, and enter state 39


State 89

	aexpr -> let rec . bindings in expr                 (rule 42)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 13
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	bindings       goto state 110
	binding        goto state 7
	pattern        goto state 8
	constant       goto state 9

State 90

	fexpr -> fexpr aexpr .                              (rule 37)

	let            reduce using rule 37
	in             reduce using rule 37
	and            reduce using rule 37
	if             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	match          reduce using rule 37
	with           reduce using rule 37
	fun            reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'>='           reduce using rule 37
	'>'            reduce using rule 37
	'&&'           reduce using rule 37
	'||'           reduce using rule 37
	id             reduce using rule 37
	constr         reduce using rule 37
	int            reduce using rule 37
	float          reduce using rule 37
	string         reduce using rule 37
	true           reduce using rule 37
	false          reduce using rule 37
	':'            reduce using rule 37
	'::'           reduce using rule 37
	';'            reduce using rule 37
	';;'           reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'|'            reduce using rule 37
	%eof           reduce using rule 37


State 91

	infix_expr -> infix_expr bop . expr1                (rule 31)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr1          goto state 109
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 92

	bop -> '+' .                                        (rule 56)

	let            reduce using rule 56
	if             reduce using rule 56
	match          reduce using rule 56
	fun            reduce using rule 56
	'('            reduce using rule 56
	'['            reduce using rule 56
	'-'            reduce using rule 56
	'!'            reduce using rule 56
	id             reduce using rule 56
	constr         reduce using rule 56
	int            reduce using rule 56
	float          reduce using rule 56
	string         reduce using rule 56
	true           reduce using rule 56
	false          reduce using rule 56


State 93

	bop -> '-' .                                        (rule 57)

	let            reduce using rule 57
	if             reduce using rule 57
	match          reduce using rule 57
	fun            reduce using rule 57
	'('            reduce using rule 57
	'['            reduce using rule 57
	'-'            reduce using rule 57
	'!'            reduce using rule 57
	id             reduce using rule 57
	constr         reduce using rule 57
	int            reduce using rule 57
	float          reduce using rule 57
	string         reduce using rule 57
	true           reduce using rule 57
	false          reduce using rule 57


State 94

	bop -> '*' .                                        (rule 58)

	let            reduce using rule 58
	if             reduce using rule 58
	match          reduce using rule 58
	fun            reduce using rule 58
	'('            reduce using rule 58
	'['            reduce using rule 58
	'-'            reduce using rule 58
	'!'            reduce using rule 58
	id             reduce using rule 58
	constr         reduce using rule 58
	int            reduce using rule 58
	float          reduce using rule 58
	string         reduce using rule 58
	true           reduce using rule 58
	false          reduce using rule 58


State 95

	bop -> '/' .                                        (rule 59)

	let            reduce using rule 59
	if             reduce using rule 59
	match          reduce using rule 59
	fun            reduce using rule 59
	'('            reduce using rule 59
	'['            reduce using rule 59
	'-'            reduce using rule 59
	'!'            reduce using rule 59
	id             reduce using rule 59
	constr         reduce using rule 59
	int            reduce using rule 59
	float          reduce using rule 59
	string         reduce using rule 59
	true           reduce using rule 59
	false          reduce using rule 59


State 96

	bop -> '<' .                                        (rule 60)

	let            reduce using rule 60
	if             reduce using rule 60
	match          reduce using rule 60
	fun            reduce using rule 60
	'('            reduce using rule 60
	'['            reduce using rule 60
	'-'            reduce using rule 60
	'!'            reduce using rule 60
	id             reduce using rule 60
	constr         reduce using rule 60
	int            reduce using rule 60
	float          reduce using rule 60
	string         reduce using rule 60
	true           reduce using rule 60
	false          reduce using rule 60


State 97

	bop -> '<=' .                                       (rule 61)

	let            reduce using rule 61
	if             reduce using rule 61
	match          reduce using rule 61
	fun            reduce using rule 61
	'('            reduce using rule 61
	'['            reduce using rule 61
	'-'            reduce using rule 61
	'!'            reduce using rule 61
	id             reduce using rule 61
	constr         reduce using rule 61
	int            reduce using rule 61
	float          reduce using rule 61
	string         reduce using rule 61
	true           reduce using rule 61
	false          reduce using rule 61


State 98

	bop -> '=' .                                        (rule 62)

	let            reduce using rule 62
	if             reduce using rule 62
	match          reduce using rule 62
	fun            reduce using rule 62
	'('            reduce using rule 62
	'['            reduce using rule 62
	'-'            reduce using rule 62
	'!'            reduce using rule 62
	id             reduce using rule 62
	constr         reduce using rule 62
	int            reduce using rule 62
	float          reduce using rule 62
	string         reduce using rule 62
	true           reduce using rule 62
	false          reduce using rule 62


State 99

	bop -> '<>' .                                       (rule 63)

	let            reduce using rule 63
	if             reduce using rule 63
	match          reduce using rule 63
	fun            reduce using rule 63
	'('            reduce using rule 63
	'['            reduce using rule 63
	'-'            reduce using rule 63
	'!'            reduce using rule 63
	id             reduce using rule 63
	constr         reduce using rule 63
	int            reduce using rule 63
	float          reduce using rule 63
	string         reduce using rule 63
	true           reduce using rule 63
	false          reduce using rule 63


State 100

	bop -> '>=' .                                       (rule 64)

	let            reduce using rule 64
	if             reduce using rule 64
	match          reduce using rule 64
	fun            reduce using rule 64
	'('            reduce using rule 64
	'['            reduce using rule 64
	'-'            reduce using rule 64
	'!'            reduce using rule 64
	id             reduce using rule 64
	constr         reduce using rule 64
	int            reduce using rule 64
	float          reduce using rule 64
	string         reduce using rule 64
	true           reduce using rule 64
	false          reduce using rule 64


State 101

	bop -> '>' .                                        (rule 65)

	let            reduce using rule 65
	if             reduce using rule 65
	match          reduce using rule 65
	fun            reduce using rule 65
	'('            reduce using rule 65
	'['            reduce using rule 65
	'-'            reduce using rule 65
	'!'            reduce using rule 65
	id             reduce using rule 65
	constr         reduce using rule 65
	int            reduce using rule 65
	float          reduce using rule 65
	string         reduce using rule 65
	true           reduce using rule 65
	false          reduce using rule 65


State 102

	bop -> '&&' .                                       (rule 66)

	let            reduce using rule 66
	if             reduce using rule 66
	match          reduce using rule 66
	fun            reduce using rule 66
	'('            reduce using rule 66
	'['            reduce using rule 66
	'-'            reduce using rule 66
	'!'            reduce using rule 66
	id             reduce using rule 66
	constr         reduce using rule 66
	int            reduce using rule 66
	float          reduce using rule 66
	string         reduce using rule 66
	true           reduce using rule 66
	false          reduce using rule 66


State 103

	bop -> '||' .                                       (rule 67)

	let            reduce using rule 67
	if             reduce using rule 67
	match          reduce using rule 67
	fun            reduce using rule 67
	'('            reduce using rule 67
	'['            reduce using rule 67
	'-'            reduce using rule 67
	'!'            reduce using rule 67
	id             reduce using rule 67
	constr         reduce using rule 67
	int            reduce using rule 67
	float          reduce using rule 67
	string         reduce using rule 67
	true           reduce using rule 67
	false          reduce using rule 67


State 104

	expr -> infix_expr ':' . type                       (rule 29)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 108
	type_tuple     goto state 71
	type1          goto state 72

State 105

	infix_expr -> infix_expr '::' . infix_expr          (rule 32)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	infix_expr     goto state 107
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 106

	bop -> ';' .                                        (rule 68)

	let            reduce using rule 68
	if             reduce using rule 68
	match          reduce using rule 68
	fun            reduce using rule 68
	'('            reduce using rule 68
	'['            reduce using rule 68
	'-'            reduce using rule 68
	'!'            reduce using rule 68
	id             reduce using rule 68
	constr         reduce using rule 68
	int            reduce using rule 68
	float          reduce using rule 68
	string         reduce using rule 68
	true           reduce using rule 68
	false          reduce using rule 68


State 107

	infix_expr -> infix_expr . bop expr1                (rule 31)
	infix_expr -> infix_expr . '::' infix_expr          (rule 32)
	infix_expr -> infix_expr '::' infix_expr .          (rule 32)

	let            reduce using rule 32
	in             reduce using rule 32
	and            reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	match          reduce using rule 32
	with           reduce using rule 32
	fun            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'<'            shift, and enter state 96
	'<='           shift, and enter state 97
	'='            shift, and enter state 98
	'<>'           shift, and enter state 99
	'>='           shift, and enter state 100
	'>'            shift, and enter state 101
	'&&'           shift, and enter state 102
	'||'           shift, and enter state 103
	id             reduce using rule 32
	constr         reduce using rule 32
	int            reduce using rule 32
	float          reduce using rule 32
	string         reduce using rule 32
	true           reduce using rule 32
	false          reduce using rule 32
	':'            reduce using rule 32
	'::'           shift, and enter state 105
	';'            reduce using rule 32
	';;'           reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	'|'            reduce using rule 32
	%eof           reduce using rule 32

	bop            goto state 91

State 108

	expr -> infix_expr ':' type .                       (rule 29)
	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)

	let            reduce using rule 79
			(reduce using rule 29)

	in             reduce using rule 79
			(reduce using rule 29)

	and            reduce using rule 79
			(reduce using rule 29)

	if             reduce using rule 79
			(reduce using rule 29)

	then           reduce using rule 79
			(reduce using rule 29)

	else           reduce using rule 79
			(reduce using rule 29)

	match          reduce using rule 79
			(reduce using rule 29)

	with           reduce using rule 79
			(reduce using rule 29)

	fun            reduce using rule 79
			(reduce using rule 29)

	'('            reduce using rule 79
			(reduce using rule 29)

	')'            reduce using rule 79
			(reduce using rule 29)

	'['            reduce using rule 79
			(reduce using rule 29)

	']'            reduce using rule 79
			(reduce using rule 29)

	'+'            reduce using rule 79
			(reduce using rule 29)

	'-'            reduce using rule 79
			(reduce using rule 29)

	'*'            reduce using rule 79
			(reduce using rule 29)

	'/'            reduce using rule 79
			(reduce using rule 29)

	'<'            reduce using rule 79
			(reduce using rule 29)

	'<='           reduce using rule 79
			(reduce using rule 29)

	'='            reduce using rule 79
			(reduce using rule 29)

	'<>'           reduce using rule 79
			(reduce using rule 29)

	'>='           reduce using rule 79
			(reduce using rule 29)

	'>'            reduce using rule 79
			(reduce using rule 29)

	'&&'           reduce using rule 79
			(reduce using rule 29)

	'||'           reduce using rule 79
			(reduce using rule 29)

	id             reduce using rule 79
			(reduce using rule 29)

	constr         reduce using rule 79
			(reduce using rule 29)

	int            reduce using rule 79
			(reduce using rule 29)

	float          reduce using rule 79
			(reduce using rule 29)

	string         reduce using rule 79
			(reduce using rule 29)

	true           reduce using rule 79
			(reduce using rule 29)

	false          reduce using rule 79
			(reduce using rule 29)

	':'            reduce using rule 79
			(reduce using rule 29)

	'::'           reduce using rule 79
			(reduce using rule 29)

	';'            reduce using rule 79
			(reduce using rule 29)

	';;'           reduce using rule 79
			(reduce using rule 29)

	','            reduce using rule 79
			(reduce using rule 29)

	'->'           shift, and enter state 127
			(reduce using rule 79)
			(reduce using rule 29)

	'|'            reduce using rule 79
			(reduce using rule 29)

	%eof           reduce using rule 79
			(reduce using rule 29)



State 109

	infix_expr -> infix_expr bop expr1 .                (rule 31)

	let            reduce using rule 31
	in             reduce using rule 31
	and            reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	match          reduce using rule 31
	with           reduce using rule 31
	fun            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'='            reduce using rule 31
	'<>'           reduce using rule 31
	'>='           reduce using rule 31
	'>'            reduce using rule 31
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	id             reduce using rule 31
	constr         reduce using rule 31
	int            reduce using rule 31
	float          reduce using rule 31
	string         reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	':'            reduce using rule 31
	'::'           reduce using rule 31
	';'            reduce using rule 31
	';;'           reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	'|'            reduce using rule 31
	%eof           reduce using rule 31


State 110

	bindings -> bindings . and binding                  (rule 8)
	aexpr -> let rec bindings . in expr                 (rule 42)

	in             shift, and enter state 144
	and            shift, and enter state 39


State 111

	aexpr -> let bindings in . expr                     (rule 41)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 143
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 112

	aexpr -> if expr then . expr else expr              (rule 43)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 142
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 113

	aexpr -> match expr with . pattern_matching         (rule 44)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20
	'|'            shift, and enter state 141

	pattern        goto state 137
	pattern_matchinggoto state 138
	matches        goto state 139
	pattern_match  goto state 140
	constant       goto state 9

State 114

	aexpr -> fun parameters ':' . type '->' expr        (rule 40)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 136
	type_tuple     goto state 71
	type1          goto state 72

State 115

	aexpr -> fun parameters '->' . expr                 (rule 39)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 135
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 116

	aexpr1 -> '(' exprs_comma ')' .                     (rule 50)

	let            reduce using rule 50
	in             reduce using rule 50
	and            reduce using rule 50
	if             reduce using rule 50
	then           reduce using rule 50
	else           reduce using rule 50
	match          reduce using rule 50
	with           reduce using rule 50
	fun            reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'['            reduce using rule 50
	']'            reduce using rule 50
	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'='            reduce using rule 50
	'<>'           reduce using rule 50
	'>='           reduce using rule 50
	'>'            reduce using rule 50
	'&&'           reduce using rule 50
	'||'           reduce using rule 50
	id             reduce using rule 50
	constr         reduce using rule 50
	int            reduce using rule 50
	float          reduce using rule 50
	string         reduce using rule 50
	true           reduce using rule 50
	false          reduce using rule 50
	':'            reduce using rule 50
	'::'           reduce using rule 50
	';'            reduce using rule 50
	';;'           reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'|'            reduce using rule 50
	%eof           reduce using rule 50


State 117

	exprs_comma -> exprs_comma ',' . expr               (rule 53)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 134
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 118

	aexpr1 -> '(' expr ')' .                            (rule 49)

	let            reduce using rule 49
	in             reduce using rule 49
	and            reduce using rule 49
	if             reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	match          reduce using rule 49
	with           reduce using rule 49
	fun            reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'['            reduce using rule 49
	']'            reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'='            reduce using rule 49
	'<>'           reduce using rule 49
	'>='           reduce using rule 49
	'>'            reduce using rule 49
	'&&'           reduce using rule 49
	'||'           reduce using rule 49
	id             reduce using rule 49
	constr         reduce using rule 49
	int            reduce using rule 49
	float          reduce using rule 49
	string         reduce using rule 49
	true           reduce using rule 49
	false          reduce using rule 49
	':'            reduce using rule 49
	'::'           reduce using rule 49
	';'            reduce using rule 49
	';;'           reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'|'            reduce using rule 49
	%eof           reduce using rule 49


State 119

	aexpr1 -> '[' exprs_semi ']' .                      (rule 51)

	let            reduce using rule 51
	in             reduce using rule 51
	and            reduce using rule 51
	if             reduce using rule 51
	then           reduce using rule 51
	else           reduce using rule 51
	match          reduce using rule 51
	with           reduce using rule 51
	fun            reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'['            reduce using rule 51
	']'            reduce using rule 51
	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'='            reduce using rule 51
	'<>'           reduce using rule 51
	'>='           reduce using rule 51
	'>'            reduce using rule 51
	'&&'           reduce using rule 51
	'||'           reduce using rule 51
	id             reduce using rule 51
	constr         reduce using rule 51
	int            reduce using rule 51
	float          reduce using rule 51
	string         reduce using rule 51
	true           reduce using rule 51
	false          reduce using rule 51
	':'            reduce using rule 51
	'::'           reduce using rule 51
	';'            reduce using rule 51
	';;'           reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'|'            reduce using rule 51
	%eof           reduce using rule 51


State 120

	exprs_semi -> exprs_comma ';' . expr                (rule 55)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 133
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 121

	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)
	parameter -> '(' id ':' type . ')'                  (rule 85)

	')'            shift, and enter state 132
			(reduce using rule 79)

	'*'            reduce using rule 79
	'->'           shift, and enter state 127
			(reduce using rule 79)



State 122

	type1 -> apo id .                                   (rule 82)

	let            reduce using rule 82
	in             reduce using rule 82
	and            reduce using rule 82
	if             reduce using rule 82
	then           reduce using rule 82
	else           reduce using rule 82
	match          reduce using rule 82
	with           reduce using rule 82
	fun            reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	'['            reduce using rule 82
	']'            reduce using rule 82
	'+'            reduce using rule 82
	'-'            reduce using rule 82
	'*'            reduce using rule 82
	'/'            reduce using rule 82
	'<'            reduce using rule 82
	'<='           reduce using rule 82
	'='            reduce using rule 82
	'<>'           reduce using rule 82
	'>='           reduce using rule 82
	'>'            reduce using rule 82
	'&&'           reduce using rule 82
	'||'           reduce using rule 82
	id             reduce using rule 82
	constr         reduce using rule 82
	int            reduce using rule 82
	float          reduce using rule 82
	string         reduce using rule 82
	true           reduce using rule 82
	false          reduce using rule 82
	':'            reduce using rule 82
	'::'           reduce using rule 82
	';'            reduce using rule 82
	';;'           reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	'|'            reduce using rule 82
	%eof           reduce using rule 82


State 123

	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)
	type1 -> '(' type . ')'                             (rule 83)

	')'            shift, and enter state 131
			(reduce using rule 79)

	'*'            reduce using rule 79
	'->'           shift, and enter state 127
			(reduce using rule 79)



State 124

	type -> type1 id .                                  (rule 76)

	let            reduce using rule 76
	in             reduce using rule 76
	and            reduce using rule 76
	if             reduce using rule 76
	then           reduce using rule 76
	else           reduce using rule 76
	match          reduce using rule 76
	with           reduce using rule 76
	fun            reduce using rule 76
	'('            reduce using rule 76
	')'            reduce using rule 76
	'['            reduce using rule 76
	']'            reduce using rule 76
	'+'            reduce using rule 76
	'-'            reduce using rule 76
	'*'            reduce using rule 76
	'/'            reduce using rule 76
	'<'            reduce using rule 76
	'<='           reduce using rule 76
	'='            reduce using rule 76
	'<>'           reduce using rule 76
	'>='           reduce using rule 76
	'>'            reduce using rule 76
	'&&'           reduce using rule 76
	'||'           reduce using rule 76
	id             reduce using rule 76
	constr         reduce using rule 76
	int            reduce using rule 76
	float          reduce using rule 76
	string         reduce using rule 76
	true           reduce using rule 76
	false          reduce using rule 76
	':'            reduce using rule 76
	'::'           reduce using rule 76
	';'            reduce using rule 76
	';;'           reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'|'            reduce using rule 76
	%eof           reduce using rule 76


State 125

	type_tuple -> type_tuple '*' . type                 (rule 80)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type           goto state 130
	type_tuple     goto state 71
	type1          goto state 72

State 126

	binding -> id parameters ':' type '=' . expr        (rule 10)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 129
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 127

	type -> type '->' . type1                           (rule 75)

	'('            shift, and enter state 73
	id             shift, and enter state 74
	apo            shift, and enter state 75

	type1          goto state 128

State 128

	type -> type '->' type1 .                           (rule 75)

	let            reduce using rule 75
	in             reduce using rule 75
	and            reduce using rule 75
	if             reduce using rule 75
	then           reduce using rule 75
	else           reduce using rule 75
	match          reduce using rule 75
	with           reduce using rule 75
	fun            reduce using rule 75
	'('            reduce using rule 75
	')'            reduce using rule 75
	'['            reduce using rule 75
	']'            reduce using rule 75
	'+'            reduce using rule 75
	'-'            reduce using rule 75
	'*'            reduce using rule 75
	'/'            reduce using rule 75
	'<'            reduce using rule 75
	'<='           reduce using rule 75
	'='            reduce using rule 75
	'<>'           reduce using rule 75
	'>='           reduce using rule 75
	'>'            reduce using rule 75
	'&&'           reduce using rule 75
	'||'           reduce using rule 75
	id             reduce using rule 75
	constr         reduce using rule 75
	int            reduce using rule 75
	float          reduce using rule 75
	string         reduce using rule 75
	true           reduce using rule 75
	false          reduce using rule 75
	':'            reduce using rule 75
	'::'           reduce using rule 75
	';'            reduce using rule 75
	';;'           reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'|'            reduce using rule 75
	%eof           reduce using rule 75


State 129

	binding -> id parameters ':' type '=' expr .        (rule 10)

	in             reduce using rule 10
	and            reduce using rule 10
	';;'           reduce using rule 10
	%eof           reduce using rule 10


State 130

	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)
	type_tuple -> type_tuple '*' type .                 (rule 80)

	let            reduce using rule 80
			(reduce using rule 79)

	in             reduce using rule 80
			(reduce using rule 79)

	and            reduce using rule 80
			(reduce using rule 79)

	if             reduce using rule 80
			(reduce using rule 79)

	then           reduce using rule 80
			(reduce using rule 79)

	else           reduce using rule 80
			(reduce using rule 79)

	match          reduce using rule 80
			(reduce using rule 79)

	with           reduce using rule 80
			(reduce using rule 79)

	fun            reduce using rule 80
			(reduce using rule 79)

	'('            reduce using rule 80
			(reduce using rule 79)

	')'            reduce using rule 80
			(reduce using rule 79)

	'['            reduce using rule 80
			(reduce using rule 79)

	']'            reduce using rule 80
			(reduce using rule 79)

	'+'            reduce using rule 80
			(reduce using rule 79)

	'-'            reduce using rule 80
			(reduce using rule 79)

	'*'            reduce using rule 80
			(reduce using rule 79)

	'/'            reduce using rule 80
			(reduce using rule 79)

	'<'            reduce using rule 80
			(reduce using rule 79)

	'<='           reduce using rule 80
			(reduce using rule 79)

	'='            reduce using rule 80
			(reduce using rule 79)

	'<>'           reduce using rule 80
			(reduce using rule 79)

	'>='           reduce using rule 80
			(reduce using rule 79)

	'>'            reduce using rule 80
			(reduce using rule 79)

	'&&'           reduce using rule 80
			(reduce using rule 79)

	'||'           reduce using rule 80
			(reduce using rule 79)

	id             reduce using rule 80
			(reduce using rule 79)

	constr         reduce using rule 80
			(reduce using rule 79)

	int            reduce using rule 80
			(reduce using rule 79)

	float          reduce using rule 80
			(reduce using rule 79)

	string         reduce using rule 80
			(reduce using rule 79)

	true           reduce using rule 80
			(reduce using rule 79)

	false          reduce using rule 80
			(reduce using rule 79)

	':'            reduce using rule 80
			(reduce using rule 79)

	'::'           reduce using rule 80
			(reduce using rule 79)

	';'            reduce using rule 80
			(reduce using rule 79)

	';;'           reduce using rule 80
			(reduce using rule 79)

	','            reduce using rule 80
			(reduce using rule 79)

	'->'           reduce using rule 80
	'|'            reduce using rule 80
			(reduce using rule 79)

	%eof           reduce using rule 80
			(reduce using rule 79)



State 131

	type1 -> '(' type ')' .                             (rule 83)

	let            reduce using rule 83
	in             reduce using rule 83
	and            reduce using rule 83
	if             reduce using rule 83
	then           reduce using rule 83
	else           reduce using rule 83
	match          reduce using rule 83
	with           reduce using rule 83
	fun            reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'['            reduce using rule 83
	']'            reduce using rule 83
	'+'            reduce using rule 83
	'-'            reduce using rule 83
	'*'            reduce using rule 83
	'/'            reduce using rule 83
	'<'            reduce using rule 83
	'<='           reduce using rule 83
	'='            reduce using rule 83
	'<>'           reduce using rule 83
	'>='           reduce using rule 83
	'>'            reduce using rule 83
	'&&'           reduce using rule 83
	'||'           reduce using rule 83
	id             reduce using rule 83
	constr         reduce using rule 83
	int            reduce using rule 83
	float          reduce using rule 83
	string         reduce using rule 83
	true           reduce using rule 83
	false          reduce using rule 83
	':'            reduce using rule 83
	'::'           reduce using rule 83
	';'            reduce using rule 83
	';;'           reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'|'            reduce using rule 83
	%eof           reduce using rule 83


State 132

	parameter -> '(' id ':' type ')' .                  (rule 85)

	'('            reduce using rule 85
	id             reduce using rule 85
	':'            reduce using rule 85
	'->'           reduce using rule 85


State 133

	exprs_semi -> exprs_comma ';' expr .                (rule 55)

	']'            reduce using rule 55


State 134

	exprs_comma -> exprs_comma ',' expr .               (rule 53)

	')'            reduce using rule 53
	';'            reduce using rule 53
	','            reduce using rule 53


State 135

	aexpr -> fun parameters '->' expr .                 (rule 39)

	let            reduce using rule 39
	in             reduce using rule 39
	and            reduce using rule 39
	if             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	match          reduce using rule 39
	with           reduce using rule 39
	fun            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'>='           reduce using rule 39
	'>'            reduce using rule 39
	'&&'           reduce using rule 39
	'||'           reduce using rule 39
	id             reduce using rule 39
	constr         reduce using rule 39
	int            reduce using rule 39
	float          reduce using rule 39
	string         reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	':'            reduce using rule 39
	'::'           reduce using rule 39
	';'            reduce using rule 39
	';;'           reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'|'            reduce using rule 39
	%eof           reduce using rule 39


State 136

	aexpr -> fun parameters ':' type . '->' expr        (rule 40)
	type -> type . '->' type1                           (rule 75)
	type_tuple -> type .                                (rule 79)

	'*'            reduce using rule 79
	'->'           shift, and enter state 151
			(reduce using rule 79)



State 137

	pattern -> pattern . '|' pattern                    (rule 16)
	pattern -> pattern . as id                          (rule 17)
	pattern -> pattern . '::' pattern                   (rule 22)
	pattern_match -> pattern . '->' expr                (rule 73)
	pattern_match -> pattern . when expr '->' expr      (rule 74)

	as             shift, and enter state 35
	when           shift, and enter state 149
	'::'           shift, and enter state 37
	'->'           shift, and enter state 150
	'|'            shift, and enter state 38


State 138

	aexpr -> match expr with pattern_matching .         (rule 44)

	let            reduce using rule 44
	in             reduce using rule 44
	and            reduce using rule 44
	if             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	match          reduce using rule 44
	with           reduce using rule 44
	fun            reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'['            reduce using rule 44
	']'            reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'='            reduce using rule 44
	'<>'           reduce using rule 44
	'>='           reduce using rule 44
	'>'            reduce using rule 44
	'&&'           reduce using rule 44
	'||'           reduce using rule 44
	id             reduce using rule 44
	constr         reduce using rule 44
	int            reduce using rule 44
	float          reduce using rule 44
	string         reduce using rule 44
	true           reduce using rule 44
	false          reduce using rule 44
	':'            reduce using rule 44
	'::'           reduce using rule 44
	';'            reduce using rule 44
	';;'           reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'|'            reduce using rule 44
	%eof           reduce using rule 44


State 139

	pattern_matching -> matches .                       (rule 69)
	matches -> matches . '|' pattern_match              (rule 72)

	let            reduce using rule 69
	in             reduce using rule 69
	and            reduce using rule 69
	if             reduce using rule 69
	then           reduce using rule 69
	else           reduce using rule 69
	match          reduce using rule 69
	with           reduce using rule 69
	fun            reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	'['            reduce using rule 69
	']'            reduce using rule 69
	'+'            reduce using rule 69
	'-'            reduce using rule 69
	'*'            reduce using rule 69
	'/'            reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'='            reduce using rule 69
	'<>'           reduce using rule 69
	'>='           reduce using rule 69
	'>'            reduce using rule 69
	'&&'           reduce using rule 69
	'||'           reduce using rule 69
	id             reduce using rule 69
	constr         reduce using rule 69
	int            reduce using rule 69
	float          reduce using rule 69
	string         reduce using rule 69
	true           reduce using rule 69
	false          reduce using rule 69
	':'            reduce using rule 69
	'::'           reduce using rule 69
	';'            reduce using rule 69
	';;'           reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'|'            shift, and enter state 148
			(reduce using rule 69)

	%eof           reduce using rule 69


State 140

	matches -> pattern_match .                          (rule 71)

	let            reduce using rule 71
	in             reduce using rule 71
	and            reduce using rule 71
	if             reduce using rule 71
	then           reduce using rule 71
	else           reduce using rule 71
	match          reduce using rule 71
	with           reduce using rule 71
	fun            reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	'['            reduce using rule 71
	']'            reduce using rule 71
	'+'            reduce using rule 71
	'-'            reduce using rule 71
	'*'            reduce using rule 71
	'/'            reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'='            reduce using rule 71
	'<>'           reduce using rule 71
	'>='           reduce using rule 71
	'>'            reduce using rule 71
	'&&'           reduce using rule 71
	'||'           reduce using rule 71
	id             reduce using rule 71
	constr         reduce using rule 71
	int            reduce using rule 71
	float          reduce using rule 71
	string         reduce using rule 71
	true           reduce using rule 71
	false          reduce using rule 71
	':'            reduce using rule 71
	'::'           reduce using rule 71
	';'            reduce using rule 71
	';;'           reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'|'            reduce using rule 71
	%eof           reduce using rule 71


State 141

	pattern_matching -> '|' . matches                   (rule 70)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 137
	matches        goto state 147
	pattern_match  goto state 140
	constant       goto state 9

State 142

	aexpr -> if expr then expr . else expr              (rule 43)

	else           shift, and enter state 146


State 143

	aexpr -> let bindings in expr .                     (rule 41)

	let            reduce using rule 41
	in             reduce using rule 41
	and            reduce using rule 41
	if             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	match          reduce using rule 41
	with           reduce using rule 41
	fun            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'['            reduce using rule 41
	']'            reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'='            reduce using rule 41
	'<>'           reduce using rule 41
	'>='           reduce using rule 41
	'>'            reduce using rule 41
	'&&'           reduce using rule 41
	'||'           reduce using rule 41
	id             reduce using rule 41
	constr         reduce using rule 41
	int            reduce using rule 41
	float          reduce using rule 41
	string         reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	':'            reduce using rule 41
	'::'           reduce using rule 41
	';'            reduce using rule 41
	';;'           reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'|'            reduce using rule 41
	%eof           reduce using rule 41


State 144

	aexpr -> let rec bindings in . expr                 (rule 42)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 145
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 145

	aexpr -> let rec bindings in expr .                 (rule 42)

	let            reduce using rule 42
	in             reduce using rule 42
	and            reduce using rule 42
	if             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	match          reduce using rule 42
	with           reduce using rule 42
	fun            reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'['            reduce using rule 42
	']'            reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'='            reduce using rule 42
	'<>'           reduce using rule 42
	'>='           reduce using rule 42
	'>'            reduce using rule 42
	'&&'           reduce using rule 42
	'||'           reduce using rule 42
	id             reduce using rule 42
	constr         reduce using rule 42
	int            reduce using rule 42
	float          reduce using rule 42
	string         reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	':'            reduce using rule 42
	'::'           reduce using rule 42
	';'            reduce using rule 42
	';;'           reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'|'            reduce using rule 42
	%eof           reduce using rule 42


State 146

	aexpr -> if expr then expr else . expr              (rule 43)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 158
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 147

	pattern_matching -> '|' matches .                   (rule 70)
	matches -> matches . '|' pattern_match              (rule 72)

	let            reduce using rule 70
	in             reduce using rule 70
	and            reduce using rule 70
	if             reduce using rule 70
	then           reduce using rule 70
	else           reduce using rule 70
	match          reduce using rule 70
	with           reduce using rule 70
	fun            reduce using rule 70
	'('            reduce using rule 70
	')'            reduce using rule 70
	'['            reduce using rule 70
	']'            reduce using rule 70
	'+'            reduce using rule 70
	'-'            reduce using rule 70
	'*'            reduce using rule 70
	'/'            reduce using rule 70
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'='            reduce using rule 70
	'<>'           reduce using rule 70
	'>='           reduce using rule 70
	'>'            reduce using rule 70
	'&&'           reduce using rule 70
	'||'           reduce using rule 70
	id             reduce using rule 70
	constr         reduce using rule 70
	int            reduce using rule 70
	float          reduce using rule 70
	string         reduce using rule 70
	true           reduce using rule 70
	false          reduce using rule 70
	':'            reduce using rule 70
	'::'           reduce using rule 70
	';'            reduce using rule 70
	';;'           reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'|'            reduce using rule 70
	%eof           reduce using rule 70


State 148

	matches -> matches '|' . pattern_match              (rule 72)

	'('            shift, and enter state 11
	'['            shift, and enter state 12
	id             shift, and enter state 33
	constr         shift, and enter state 14
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	'_'            shift, and enter state 20

	pattern        goto state 137
	pattern_match  goto state 157
	constant       goto state 9

State 149

	pattern_match -> pattern when . expr '->' expr      (rule 74)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 156
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 150

	pattern_match -> pattern '->' . expr                (rule 73)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 155
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 151

	aexpr -> fun parameters ':' type '->' . expr        (rule 40)
	type -> type '->' . type1                           (rule 75)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 153
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 154
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	apo            shift, and enter state 75

	expr           goto state 152
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	type1          goto state 128
	constant       goto state 49

State 152

	aexpr -> fun parameters ':' type '->' expr .        (rule 40)

	let            reduce using rule 40
	in             reduce using rule 40
	and            reduce using rule 40
	if             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	match          reduce using rule 40
	with           reduce using rule 40
	fun            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'['            reduce using rule 40
	']'            reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'='            reduce using rule 40
	'<>'           reduce using rule 40
	'>='           reduce using rule 40
	'>'            reduce using rule 40
	'&&'           reduce using rule 40
	'||'           reduce using rule 40
	id             reduce using rule 40
	constr         reduce using rule 40
	int            reduce using rule 40
	float          reduce using rule 40
	string         reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	':'            reduce using rule 40
	'::'           reduce using rule 40
	';'            reduce using rule 40
	';;'           reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'|'            reduce using rule 40
	%eof           reduce using rule 40


State 153

	aexpr1 -> '(' . expr ')'                            (rule 49)
	aexpr1 -> '(' . exprs_comma ')'                     (rule 50)
	type1 -> '(' . type ')'                             (rule 83)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 153
	')'            reduce using rule 52
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 154
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19
	','            reduce using rule 52
	apo            shift, and enter state 75

	expr           goto state 83
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	exprs_comma    goto state 84
	type           goto state 123
	type_tuple     goto state 71
	type1          goto state 72
	constant       goto state 49

State 154

	aexpr1 -> id .                                      (rule 46)
	type1 -> id .                                       (rule 81)

	let            reduce using rule 46
	in             reduce using rule 46
	and            reduce using rule 46
	if             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	match          reduce using rule 46
	with           reduce using rule 46
	fun            reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 81
			(reduce using rule 46)

	'['            reduce using rule 46
	']'            reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 81
			(reduce using rule 46)

	'/'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'='            reduce using rule 46
	'<>'           reduce using rule 46
	'>='           reduce using rule 46
	'>'            reduce using rule 46
	'&&'           reduce using rule 46
	'||'           reduce using rule 46
	id             reduce using rule 81
			(reduce using rule 46)

	constr         reduce using rule 46
	int            reduce using rule 46
	float          reduce using rule 46
	string         reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	':'            reduce using rule 46
	'::'           reduce using rule 46
	';'            reduce using rule 46
	';;'           reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 81
			(reduce using rule 46)

	'|'            reduce using rule 46
	%eof           reduce using rule 46


State 155

	pattern_match -> pattern '->' expr .                (rule 73)

	let            reduce using rule 73
	in             reduce using rule 73
	and            reduce using rule 73
	if             reduce using rule 73
	then           reduce using rule 73
	else           reduce using rule 73
	match          reduce using rule 73
	with           reduce using rule 73
	fun            reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	'['            reduce using rule 73
	']'            reduce using rule 73
	'+'            reduce using rule 73
	'-'            reduce using rule 73
	'*'            reduce using rule 73
	'/'            reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'='            reduce using rule 73
	'<>'           reduce using rule 73
	'>='           reduce using rule 73
	'>'            reduce using rule 73
	'&&'           reduce using rule 73
	'||'           reduce using rule 73
	id             reduce using rule 73
	constr         reduce using rule 73
	int            reduce using rule 73
	float          reduce using rule 73
	string         reduce using rule 73
	true           reduce using rule 73
	false          reduce using rule 73
	':'            reduce using rule 73
	'::'           reduce using rule 73
	';'            reduce using rule 73
	';;'           reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'|'            reduce using rule 73
	%eof           reduce using rule 73


State 156

	pattern_match -> pattern when expr . '->' expr      (rule 74)

	'->'           shift, and enter state 159


State 157

	matches -> matches '|' pattern_match .              (rule 72)

	let            reduce using rule 72
	in             reduce using rule 72
	and            reduce using rule 72
	if             reduce using rule 72
	then           reduce using rule 72
	else           reduce using rule 72
	match          reduce using rule 72
	with           reduce using rule 72
	fun            reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'['            reduce using rule 72
	']'            reduce using rule 72
	'+'            reduce using rule 72
	'-'            reduce using rule 72
	'*'            reduce using rule 72
	'/'            reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'='            reduce using rule 72
	'<>'           reduce using rule 72
	'>='           reduce using rule 72
	'>'            reduce using rule 72
	'&&'           reduce using rule 72
	'||'           reduce using rule 72
	id             reduce using rule 72
	constr         reduce using rule 72
	int            reduce using rule 72
	float          reduce using rule 72
	string         reduce using rule 72
	true           reduce using rule 72
	false          reduce using rule 72
	':'            reduce using rule 72
	'::'           reduce using rule 72
	';'            reduce using rule 72
	';;'           reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'|'            reduce using rule 72
	%eof           reduce using rule 72


State 158

	aexpr -> if expr then expr else expr .              (rule 43)

	let            reduce using rule 43
	in             reduce using rule 43
	and            reduce using rule 43
	if             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	match          reduce using rule 43
	with           reduce using rule 43
	fun            reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'['            reduce using rule 43
	']'            reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'='            reduce using rule 43
	'<>'           reduce using rule 43
	'>='           reduce using rule 43
	'>'            reduce using rule 43
	'&&'           reduce using rule 43
	'||'           reduce using rule 43
	id             reduce using rule 43
	constr         reduce using rule 43
	int            reduce using rule 43
	float          reduce using rule 43
	string         reduce using rule 43
	true           reduce using rule 43
	false          reduce using rule 43
	':'            reduce using rule 43
	'::'           reduce using rule 43
	';'            reduce using rule 43
	';;'           reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'|'            reduce using rule 43
	%eof           reduce using rule 43


State 159

	pattern_match -> pattern when expr '->' . expr      (rule 74)

	let            shift, and enter state 50
	if             shift, and enter state 51
	match          shift, and enter state 52
	fun            shift, and enter state 53
	'('            shift, and enter state 54
	'['            shift, and enter state 55
	'-'            shift, and enter state 56
	'!'            shift, and enter state 57
	id             shift, and enter state 58
	constr         shift, and enter state 59
	int            shift, and enter state 15
	float          shift, and enter state 16
	string         shift, and enter state 17
	true           shift, and enter state 18
	false          shift, and enter state 19

	expr           goto state 160
	infix_expr     goto state 44
	expr1          goto state 45
	fexpr          goto state 46
	aexpr          goto state 47
	aexpr1         goto state 48
	constant       goto state 49

State 160

	pattern_match -> pattern when expr '->' expr .      (rule 74)

	let            reduce using rule 74
	in             reduce using rule 74
	and            reduce using rule 74
	if             reduce using rule 74
	then           reduce using rule 74
	else           reduce using rule 74
	match          reduce using rule 74
	with           reduce using rule 74
	fun            reduce using rule 74
	'('            reduce using rule 74
	')'            reduce using rule 74
	'['            reduce using rule 74
	']'            reduce using rule 74
	'+'            reduce using rule 74
	'-'            reduce using rule 74
	'*'            reduce using rule 74
	'/'            reduce using rule 74
	'<'            reduce using rule 74
	'<='           reduce using rule 74
	'='            reduce using rule 74
	'<>'           reduce using rule 74
	'>='           reduce using rule 74
	'>'            reduce using rule 74
	'&&'           reduce using rule 74
	'||'           reduce using rule 74
	id             reduce using rule 74
	constr         reduce using rule 74
	int            reduce using rule 74
	float          reduce using rule 74
	string         reduce using rule 74
	true           reduce using rule 74
	false          reduce using rule 74
	':'            reduce using rule 74
	'::'           reduce using rule 74
	';'            reduce using rule 74
	';;'           reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'|'            reduce using rule 74
	%eof           reduce using rule 74


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 91
Number of terminals: 45
Number of non-terminals: 28
Number of states: 161
